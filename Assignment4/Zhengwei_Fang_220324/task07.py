# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/vilf0106/Curso2025-2026/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

from validation import Report

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

"""**TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
**Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**
"""

from rdflib import URIRef, Namespace
from rdflib.namespace import RDF, RDFS

ns = Namespace("http://oeg.fi.upm.es/def/people#")

classes = set()

for c in g.subjects(RDF.type, RDFS.Class):
    if isinstance(c, URIRef) and str(c).startswith(str(ns)):
        classes.add(c)

for s, o in g.subject_objects(RDFS.subClassOf):
    if isinstance(s, URIRef) and str(s).startswith(str(ns)):
        classes.add(s)
    if isinstance(o, URIRef) and str(o).startswith(str(ns)):
        classes.add(o)

result = []
for c in sorted(classes, key=str):
    sc = next(g.objects(c, RDFS.subClassOf), None)
    result.append((c, sc))




for r in result:
  print(r)

## Validation: Do not remove
report.validate_07_1a(result)

"""**TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**"""

query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?c ?sc
WHERE {
  { ?c a rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc }
  }
  UNION
  { ?c rdfs:subClassOf ?sc }
}
"""

for r in g.query(query):
  print(r.c, r.sc)

## Validation: Do not remove
report.validate_07_1b(query,g)

"""**TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

"""

from rdflib import Namespace
ns = Namespace("http://oeg.fi.upm.es/def/people#")


target = ns.Person
to_visit = [target]
closure = {target}
while to_visit:
    t = to_visit.pop()
    for sc in g.subjects(RDFS.subClassOf, t):
        if sc not in closure:
            closure.add(sc)
            to_visit.append(sc)


individuals = sorted(set(s for t in closure for s in g.subjects(RDF.type, t)))

# validation. Do not remove
report.validate_07_02a(individuals)

"""**TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**"""

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?ind
WHERE {
  ?ind a ?t .
  ?t rdfs:subClassOf* ns:Person .
}
"""
for r in g.query(query):
  print(r.ind)
# Visualize the results

## Validation: Do not remove
report.validate_07_02b(g, query)

"""**TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**"""

query = """
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name ?type
WHERE {
  ?x ns:knows ns:Rocky ;
     a ?type ;
     (ns:hasName|rdfs:label) ?name .
}
ORDER BY LCASE(STR(?name))
"""

# TO DO
# Visualize the results
for r in g.query(query):
  print(r.name, r.type)

## Validation: Do not remove
report.validate_07_03(g, query)

"""**Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**"""

query = """
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>
PREFIX rdfs:     <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name WHERE {

  {
    { ?s ontology:hasColleague/ontology:ownsPet ?pet }
    UNION
    { ?s ontology:hasColleague/ontology:hasColleague/ontology:ownsPet ?pet }
  }

  ?pet a ontology:Animal .


  OPTIONAL { ?s ontology:hasName ?n1 }
  OPTIONAL { ?s rdfs:label        ?n2 }
  BIND(COALESCE(?n1, ?n2) AS ?name)
}
ORDER BY ?name

"""



for r in g.query(query):
  print(r.name)

# TO DO
# Visualize the results

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")